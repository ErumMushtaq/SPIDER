from collections import namedtuple
import numpy as np
import torch
import torch.nn.functional as F

Genotype = namedtuple('Genotype', 'normal normal_concat reduce reduce_concat')


PRIMITIVES = [
    'sep_conv_3x3',
    'sep_conv_5x5',
    'dil_conv_3x3',
    'dil_conv_5x5',
    'skip_connect',
    'max_pool_3x3',
    'avg_pool_3x3',
    'none',
]

def genotype(alphas_normal, alphas_reduce):
    _steps = 4
    _multiplier = 4

    def _isCNNStructure(k_best):
        return k_best >= 4

    def _parse(weights):
        _steps = 4
        gene = []
        n = 2
        start = 0
        cnn_structure_count = 0
        _multiplier = 4
        for i in range(_steps):
            end = start + n
            W = weights[start:end].copy()
            edges = sorted(range(i + 2),
                           key=lambda x: -max(W[x][k] for k in range(len(W[x])) if k != PRIMITIVES.index('none')))[
                    :2]
            for j in edges:
                k_best = None
                for k in range(len(W[j])):
                    if k != PRIMITIVES.index('none'):
                        if k_best is None or W[j][k] > W[j][k_best]:
                            k_best = k

                if _isCNNStructure(k_best):
                    cnn_structure_count += 1
                gene.append((PRIMITIVES[k_best], j))
            start = end
            n += 1
        return gene, cnn_structure_count

    with torch.no_grad():
        gene_normal, cnn_structure_count_normal = _parse(F.softmax(alphas_normal, dim=-1).data.cpu().numpy())
        gene_reduce, cnn_structure_count_reduce = _parse(F.softmax(alphas_reduce, dim=-1).data.cpu().numpy())

        concat = range(2 + _steps - _multiplier, _steps + 2)
        genotype = Genotype(
            normal=gene_normal, normal_concat=concat,
            reduce=gene_reduce, reduce_concat=concat
        )


    return genotype, cnn_structure_count_normal, cnn_structure_count_reduce

#torch.tensor([[1., -1.], [1., 1.]], requires_grad=True)
alpha_normal = torch.tensor([[ 0.2584, 0.1898, 0.3401, 0.0534, 0.1058, 0.1235, -0.2166, -0.0070],
[-0.3540, -0.1319, -0.3027, 0.9066, -0.6907, -0.1494, -0.4127, 1.5148],
[ 0.0147, -0.5485, 0.1408,  0.5692, -0.0546, -0.7947, 0.9429, -0.8026],
[-0.7576, 0.2749, 0.0324, 0.4650, 0.0865, -0.1789, 0.3768, -0.0594],
[ 0.9012, -0.2629, -0.3737, -0.4707, -0.7462, 1.1694, -0.3729, -0.8646],
[ 0.5195, 0.0732, -0.3928, 0.9846, -0.0803, -0.2646, 0.0700, -0.3931],
[-0.8208, 0.5276, 0.2712, -0.4650, 0.5097, 0.9642, 0.0796, 0.6906],
[ 0.1684,  0.2432, 0.6395, 0.6965, -0.5361, -0.2129, -0.4559,  0.0461],
[-0.8666, 0.8387, -0.5581, -0.1576, 0.5264, 0.5223, 0.1399, -0.8455],
[-0.4725, 0.2161, -1.0252,  0.6373, 1.0719, -0.3904, 0.2151, -0.0216],
[ 0.8121, -0.5618, -1.1059, 0.3126, -0.3353, 0.7350, -0.5481, 0.2727],
[-0.6211, 1.1044, -1.2501,  0.6416, -0.4220, -0.0145, -0.3805, 0.3576],
[-0.4158, 0.4515, -1.0633, -0.2361, 0.0866, 1.3737, -0.1569, -0.1090],
[-0.1091, -0.1378, 0.1186, -0.4841, 0.2067, 1.1946, 0.5501, -0.3662]], requires_grad=True)
alpha_reduce = torch.tensor([[-0.0737, 1.2436, -0.3051, 0.2626, 0.1758, -0.5265, -0.5062, -0.2553],
[-0.4965, -0.0065, 0.2183, -0.0706, -0.4224, 0.1655, 0.2788, 0.7633],
[ 0.4374, -0.2689, 0.5483, 0.1443, -0.0437, -0.0617, 0.0020, -0.1529],
[ 0.7616, 0.2277, 0.3104, 0.3373, 0.0960, -0.5303, -0.1726, -0.2537],
[-0.5535, -0.2015, -0.4358, 0.8226, 0.1130, 0.3186, -0.0938, 1.2131],
[-0.5528, 0.2547, -0.6414, -0.5279, 1.1417, -0.1555, 0.1858, 0.4887],
[ 0.2661, -0.3897, -0.1666, -0.7526, -0.4268,  0.0423, 0.5486, 1.1736],
[-0.3206, 0.2976, -0.3977, -0.2044, 0.0238, 0.1635, -0.1543, 1.3229],
[ 0.3659, -0.2160, -0.6108, -0.0239, -0.4536, 1.2025, -0.3092, -0.3594],
[ 1.1665, 0.2991, -0.0042, -0.4704, 0.3850, -0.5448, -0.6007, -0.2913],
[-0.1477, -0.0650, -0.3622, -0.1789, -0.1393, -0.2745, 0.3291, 1.2113],
[ 0.7350, -0.1375, 0.5729, -0.6758, -0.2092, -0.1090, -0.4285, 0.4763],
[-0.1188, -0.0389, -0.2206, -0.6493, -0.0437,  1.1785, -0.0240, 0.1495],
[ 0.1224, -0.1856, -0.0887, -0.1853, -0.3421,  1.0333, -0.3494, 0.1145]], requires_grad=True)


genotypee, cnn_structure_count_normal, cnn_structure_count_reduce = genotype(alpha_normal, alpha_reduce)
print(genotypee)

alpha_normal = torch.tensor([[ 0.6309, 0.6166, -0.2583, -1.3396, -0.1715,  0.6185, 0.0124, -0.6753],
                             [ 0.4396, 0.0997, -0.0291, -0.4340, 0.7523, -0.6515, 0.2579, 0.6122],
                             [ 0.1675, -0.3382, 0.1307, -0.4411, -0.0029, 0.9977, 0.1017, -0.6754],
                             [-0.3028, 0.7029, 0.0785, 0.0612, 0.2306, -0.1101, 0.2395, -0.3565],
                             [ 0.4386, -1.2834, 0.0244, 0.1839, -0.4210, 0.8827, 0.5395, -0.8243],
                             [ 0.7393, -1.0891, 0.0882, 0.1388, -0.0906, 0.2775, 0.1117, -0.3106],
                             [ 0.6269, 0.3727, -0.0115, 0.7586, -0.2580, -0.4060, -0.4377, -0.7338],
                             [ 0.5672, -0.1084, -0.0898, -0.1678, -0.4547, -0.0403, 0.5135, -0.7363],
                             [-1.2896, 0.9028, -0.6805, -1.0174, 0.2854, 1.1231, 0.4571, -0.9023],
                             [ 0.3202, 0.0872, 1.2914, -0.7790, -0.1209, -0.2657, -0.0236, -0.4159],
                             [ 0.0832, -0.0237, -0.4772, 0.8001, 0.4529, -0.0135, 0.1699, -0.4244],
                             [ 0.2367, 0.6178, 0.3170, 0.8336, -0.8105, -0.6575, -0.3863, -0.8927],
                             [ 0.2646, -0.4562, -0.4456, 1.0347, -0.3504, 0.3370, 0.0466, -0.7051],
                             [-1.1106, -0.5600, 0.1914, 0.7628, 0.1612, 0.9461, 0.0167, -0.8436]], requires_grad=True)
alpha_reduce = torch.tensor([[ 0.0924, 0.2698, -0.3376, 0.2929, -0.5207, 0.6077, -0.1260, 0.2678],
                             [-0.1849, -0.3065, 0.2505,  0.5316, 0.5371, -0.2266, -0.1480, 0.0360],
                             [ 0.1356, 0.1366, 0.5424, -1.0536, -0.0216, -0.1451, -0.3879, 0.9550],
                             [ 0.1104, -0.3815, 0.8405, 0.4974, -0.9670, -0.1973, -0.3130, 0.6412],
                             [ 0.2773, -0.4147, -0.4999, 0.7616, -0.4550, 0.0145, -0.3193, -0.1834],
                             [ 0.3295, -0.1291, -0.8478, -0.6109, -0.2619, 0.7934, 0.6443, 0.2798],
                             [ 0.2053,  0.2337, -0.1420, -0.0311, -0.0396, 0.1147, -0.0498, 0.2908],
                             [-0.4034, 0.4498, -0.3120, 0.3524, -0.2819, 0.2420, -0.1544, -0.1164],
                             [-0.3406, 0.9142, -0.0264,  0.5518, -0.6683, -0.2314, -0.5164, -0.5533],
                             [-0.2841, 0.1811, -1.0448,  0.1905, 0.0403, 0.5529, 0.3490, 0.5059],
                             [-0.1703,  0.4922, -0.1132, -0.1895, -0.2364, 0.1360, 0.0944, 0.1891],
                             [ 0.3174, -0.5200, -0.1941, 0.5894, 0.0350, 0.2430, -0.1100, 0.5827],
                             [-0.2181, 0.3265,  1.0989, -0.1369, -0.3462, -0.2304, -0.3174, -0.0745],
                             [-0.1987, 0.4618, 0.7843, 0.1152, -0.5707, 0.0637, -0.4525, -0.3781]], requires_grad=True)

genotypee, cnn_structure_count_normal, cnn_structure_count_reduce = genotype(alpha_normal, alpha_reduce)
print(genotypee)

